PATRON Solver

k*insercio + n*m*(8^l)*l*(stepForward + stepBackwards + isEmpty) + k* popWord

				Tree		
------------------------------------------------------------------------
l      		    	     	 1 + 1 + 1		     l

				Hash
------------------------------------------------------------------------
1		   	   (1 |  k*l) + 1 + 1      	     1
			"maxim 9^l cops"

				Vector
------------------------------------------------------------------------
log k		   	   (1 |  k*l) + 1 + 1      	     log k
			"maxim 9^l cops"



WORD Solver

k * n * m * (8^l)*l

	Amb aquest solucionador assolim l'objectiu d'examinar la possiblitat que una paraula concreta del diccionari sigui al tauler.
La forma en què funciona exactament és a base de diferents DFS molt restringits. Bàsicament, per cada paraula fa un DFS comenssant per cada posició diferent del tauler.
Aquest DFS es crida recursivament en les màxim 8 posicions contigües a la casella actual, podent fer repeticions, però només ho fa si el caràcter (o número) que es troba en la casella actual correspon al que estem observant de la paraula que busquem.
Per tant, quan un DFS comença, es comprova que el caràcter a la casella sigui igual al primer de l'string, i si es compleix es crida recursivament a 8 (o menys) DFS indicant que s'han de comparar ara amb el segon caràcter de l'string.
El cost d'aquest algoritme seria de O(k*n*m*8^l*l) si considerem que es fan tots els DFS possibles de "l" de llargada, però com hem vist l'algoritme només segueix un camí un de cada 10 cops si considerem que els números del tauler són aleatoris.
Per tant, podem aproximar el cost real a O(k*n*m*l).
	